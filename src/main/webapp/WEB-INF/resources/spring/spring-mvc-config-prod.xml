<beans profile="prod" xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.0.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <!--NOTE: Component scan takes a long time to initialize.  We may lose traffic if our initialization time is
    too big, according to Google:  https://cloud.google.com/appengine/articles/spring_optimization
    However, it is extremely convenient, and doing without it is going to add extra development time to figure out.
    If we start getting DeadlineExceededException when a new instance is spun up, we'll need to revisit this topic.-->
    <context:component-scan base-package="com.troveup.brooklyn" />
    <mvc:annotation-driven />
    <mvc:resources mapping="/resources/**" location="/WEB-INF/resources/" />
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix">
            <value>/WEB-INF/views/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>

    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Exception">error/error</prop>
                <prop key="java.lang.RuntimeException">error/error</prop>
            </props>
        </property>
        <property name="statusCodes">
            <props>
                <prop key="error/404">404</prop>
                <prop key="error/error">500</prop>
            </props>
        </property>
    </bean>

    <bean id="pmfProxy" class="org.springframework.orm.jdo.TransactionAwarePersistenceManagerFactoryProxy">
        <property name="targetPersistenceManagerFactory" ref="pmf"/>
    </bean>

    <bean id="pmf" class="org.springframework.orm.jdo.LocalPersistenceManagerFactoryBean" lazy-init="true">
        <property name="jdoProperties">
            <props>
                <prop key="javax.jdo.PersistenceManagerFactoryClass">org.datanucleus.api.jdo.JDOPersistenceManagerFactory</prop>
                <prop key="javax.jdo.option.ConnectionURL">jdbc:mysql://127.0.0.1:8889/troveweb</prop>
                <prop key="javax.jdo.option.ConnectionUserName">root</prop>
                <prop key="javax.jdo.option.ConnectionPassword"></prop>
                <prop key="javax.jdo.option.ConnectionDriverName">com.mysql.jdbc.Driver</prop>
                <prop key="datanucleus.autoCreateSchema">true</prop>
            </props>
        </property>
    </bean>

    <!--Property listing: https://commons.apache.org/proper/commons-dbcp/api-2.1/index.html-->
    <bean id="datasource" class="org.apache.commons.dbcp.BasicDataSourceFactory" factory-method="createDataSource">
        <constructor-arg name="properties">
            <props>
                <prop key="driverClassName">com.mysql.jdbc.Driver</prop>
                <prop key="password"></prop>
                <prop key="username">root</prop>
                <prop key="url">jdbc:mysql://127.0.0.1:8889/troveweb</prop>
            </props>
        </constructor-arg>
    </bean>

    <!--Social config:
    http://docs.spring.io/spring-social/docs/1.0.x/reference/html/connecting.html#section_connecting_service_providers
    http://stackoverflow.com/questions/12687871/how-to-configure-spring-social-via-xml-->
    <bean id="connectionFactoryLocator"
          class="org.springframework.social.connect.support.ConnectionFactoryRegistry">
        <property name="connectionFactories">
            <list>
                <bean class="org.springframework.social.facebook.connect.FacebookConnectionFactory">
                    <constructor-arg value="${facebook.clientId}" />
                    <constructor-arg value="${facebook.clientSecret}" />
                </bean>
            </list>
        </property>
    </bean>
    <bean id="usersConnectionRepository"
          class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">
        <constructor-arg ref="datasource" />
        <constructor-arg ref="connectionFactoryLocator" />
        <constructor-arg ref="textEncryptor" />
    </bean>


    <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors"
          factory-method="text">
        <constructor-arg value="${security.encryptPassword}" />
        <constructor-arg value="${security.encryptSalt}" />
    </bean>

    <bean class="com.github.vbauer.herald.processor.LogBeanPostProcessor" />

    <bean name="transactionManager" class="org.springframework.orm.jdo.JdoTransactionManager">
        <property name="persistenceManagerFactory" ref="pmf"/>
    </bean>

    <bean name="userAccessor" class="com.troveup.brooklyn.orm.user.datanucleus.UserAccessor"/>
    <bean name="iAccessor" class="com.troveup.brooklyn.orm.item.datanucleus.ItemAccessor"/>
    <bean name="userDetailsService" class="com.troveup.brooklyn.spring.UserDetailsService"/>
    <!-- Bean for autowiring the logger -->
    <!--bean id="logger" class="java.util.logging.Logger" factory-method="getLogger">
        <constructor-arg type="java.lang.String" value="StandardLogger"/>
    </bean-->

    <!--Beans for persistence management (AKA MySQL Management), connects to the persistence.xml
    THANK YOU TO THIS PERSON: https://code.google.com/p/app-engine-workarounds/ -->


</beans>